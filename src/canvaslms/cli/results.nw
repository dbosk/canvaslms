\chapter{The \texttt{results} command}

This chapter provides the subcommand [[results]], which lists the results of a 
course.
The purpose of the listing is to export results from Canvas.
The format of the listing is compatible with the \texttt{ladok3} 
package\footnote{%
  URL: \url{https://github.com/dbosk/ladok3}
}.

\section{The [[results]] subcommand and its options}

We outline the module:
<<results.py>>=
import canvaslms.cli.assignments as assignments
import canvaslms.cli.courses as courses
import canvaslms.hacks.canvasapi

import argparse
import csv
import re
import sys

<<functions>>

def add_command(subp):
  """Adds the results command to argparse parser subp"""
  <<add results command to subp>>
@

We add the subparser for [[results]].
The command requires two arguments: course and assignment.
<<add results command to subp>>=
results_parser = subp.add_parser("results",
    help="Lists results of a course",
    description="Lists results of a course for export. Output format: "
      "<course code> <component code> <student ID> <grade> <grade date>")
results_parser.set_defaults(func=results_command)
assignments.add_assignment_option(results_parser)
@ Now, that [[results_command]] function must take three arguments: [[config]], 
[[canvas]] and [[args]].
However, unlike the other commands, we don't want to do the processing for the 
assignment options using [[process_assignment_option]].
We want to handle that ourselves, because we want slightly different handling.
<<functions>>=
def results_command(config, canvas, args):
  <<get results and print them>>
@

\section{Get and print the list of results}

Now we'd simply like to print the results.
The user provides us with a set of courses and a set of assignments or 
assignment groups in those courses.
If the user provides assignment groups, we will automatically summarize the 
results of all assignments in the assignment group.
<<get results and print them>>=
output = csv.writer(sys.stdout, delimiter=args.delimiter)

if args.assignment_group != ".*":
  <<summarize results for each assignment group>>
else:
  <<output result for each assignment>>

for result in results:
  output.writerow(result)
@

