\chapter{The \texttt{results} command}

This chapter provides the subcommand [[results]], which lists the results of a 
course.
The purpose of the listing is to export results from Canvas.
The format of the listing is compatible with the \texttt{ladok3} 
package\footnote{%
  URL: \url{https://github.com/dbosk/ladok3}
}.

\section{The [[results]] subcommand and its options}

We outline the module:
<<results.py>>=
import canvaslms.cli.assignments as assignments
import canvaslms.cli.courses as courses
import canvaslms.cli.submissions as submissions
import canvaslms.hacks.canvasapi

import argparse
import csv
import re
import sys

<<functions>>

def add_command(subp):
  """Adds the results command to argparse parser subp"""
  <<add results command to subp>>
@

We add the subparser for [[results]].
The command requires two arguments: course and assignment.
<<add results command to subp>>=
results_parser = subp.add_parser("results",
    help="Lists results of a course",
    description="Lists results of a course for export, for instance "
    "to the `ladok report -f` command. Output format, CSV: "
      "<course code> <component code> <student ID> <grade> <grade date>.",
    epilog="If you specify an assignment group, the results of the "
      "assignments in that group will be summarized. That means that "
      "all assignments must have a passing grade. If there are assignments "
      "with A--F grading scales (in addition to P/F) the avergage of the "
      "A--F grades will be used as final grade for the entire group. If any "
      "assignment has an F, the whole group will evaluate to an F.")
results_parser.set_defaults(func=results_command)
assignments.add_assignment_option(results_parser, ungraded=False)
@ Now, that [[results_command]] function must take three arguments: [[config]], 
[[canvas]] and [[args]].
However, unlike the other commands, we don't want to do the processing for the 
assignment options using [[process_assignment_option]].
We want to handle that ourselves, because we want slightly different handling.
<<functions>>=
def results_command(config, canvas, args):
  <<get results and print them>>
@

Now we'd simply like to print the results.
The user provides us with a set of courses and a set of assignments or 
assignment groups in those courses.
If the user provides assignment groups, we will automatically summarize the 
results of all assignments in the assignment group.

We will create a list of results, where each result is a tuple.
These tuples will then be printed in CSV format to standard output.
<<get results and print them>>=
output = csv.writer(sys.stdout, delimiter=args.delimiter)

assignments_list = assignments.process_assignment_option(canvas, args)

if args.assignment_group != "":
  results = summarize_assignment_groups(canvas, args)
else:
  results = summarize_assignments(canvas, args)

for result in results:
  output.writerow(result)
@


\section{Extracting assignment results}

In this case, we want to have one assignment per row in the output.
We want to output course, assignment, student ID, grade and submission date.

We first get the list of courses.
We do this to then get the list of all users in all courses.
We need these to get the integration ID.

Then we get the list of assignments in all courses.
We get the submissions for each assignment.
These submissions are filtered by user.
We do this because this attaches a [[user]] attribute to each submissions with 
the details of each user.
This gives a trivial [[yield]] statement at the end.
<<functions>>=
def summarize_assignments(canvas, args):
  """Turn submissions into results,
  canvas is a Canvas object,
  args is the command-line arguments"""

  courses_list = courses.process_course_option(canvas, args)

  users_list = []
  for course in courses_list:
    for user in course.get_users(enrollment_type=["student"]):
      users_list.append(user)

  assignments_list = assignments.process_assignment_option(canvas, args)
  submissions_list = submissions.filter_submissions(
    submissions.list_submissions(assignments_list, include=[]),
    users_list)

  for submission in submissions_list:
    if submission.grade is not None:
      yield (
        submission.assignment.course.course_code,
        submission.assignment.name,
        submission.user.integration_id,
        submission.grade,
        submission.submitted_at or submission.graded_at
        )
@


\section{Summarizing assignment group results}

In this case, we want to have one assignment group per row in the output.
We want to output course, assignment group, student ID, summarized grade based 
on all assignments in the group and the latest submission date.
<<functions>>=
def summarize_assignment_groups(args):
  """Summarize assignment groups into a single grade,
  canvas is a Canvas object,
  args is the command-line arguments"""
  pass
@

