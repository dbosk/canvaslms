\chapter{The main program}

The main program functionality exists in the subpackage [[canvaslms.cli]].
In this module there is a function [[main]] which is the main function of the 
command-line interface.
We define it in this chapter.

The we use subcommands, similar to Git.
Each subcommand has its own module in [[canvaslms.cli]], each module must have 
a function [[add_command]].
The [[add_command]] function takes a subparser as an argument and adds 
its subcommand and options to it.
At the end of the chapter we will call these functions for each of the included 
modules.

\section{Dependencies and source code overview}

We use the following packages:
\begin{itemize}
\item [[appdirs]] for platform specific configuration file locations, it must 
be installed by running [[python3 -m pip install appdirs]].
\item [[argcomplete]] for bash completion, it must be installed by running 
[[python3 -m pip install argcomplete]].
\item [[canvasapi]] for the Canvas LMS REST API, it must be installed by 
running [[python3 -m pip install canvasapi]].
\end{itemize}

Then the source code can be outlined as follows.
<<cli.py>>=
"""A command-line interface for the Canvas LMS."""

import appdirs
import argcomplete, argparse
from canvasapi import Canvas
import canvaslms.cli.login
import json
import os
import pathlib
import sys

<<modules>>

dirs = appdirs.AppDirs("canvaslms", "dbosk@kth.se")

<<functions>>

def main():
  <<command-line interface>>
@


\section{Printing errors and warnings}

We want uniform error handling.
We will use the function [[err]] for errors and [[warn]] for warnings, both 
inspired by err(3) and warn(3) in the BSD world.
These will be available as [[canvaslms.cli.err]] and [[canvaslms.cli.warn]].
<<functions>>=
def err(rc, msg):
  """Prints msg to stderr, prints a stack trace and
  exits with rc as return code"""
  print(f"{sys.argv[0]}: error: {msg}", file=sys.stderr)
  sys.exit(rc)

def warn(msg):
  """Prints msg to stderr"""
  print(f"{sys.argv[0]}: {msg}", file=sys.stderr)
@


\section{Configuration}

We provide several ways to supply configuration to the program.
For ease, we provide a function that loads the configuration and returns a 
dictionary containing it.
<<functions>>=
def read_configuration(config_file):
  """Returns a dictionary containing the configuration"""
  config = {}

  <<read configuration file>>
  <<read environment variables>>

  return config
@

The function gets the configuration file as an argument.
We don't return any error if the file doesn't exist.
We leave that to the caller to determine what to do if the configuration is 
empty.
Likewise, we issue a warning if the configuration file is malformed, \ie it 
can't be processed as valid JSON.
<<read configuration file>>=
try:
  with open(config_file, "r") as file:
    config.update(json.load(file))
except FileNotFoundError:
  pass
except json.decoder.JSONDecodeError as err:
  warn(f"config file is malformed: {err}")
@

We can read the credentials from the environment, this takes precedence over 
the credentials in the configuration file.
<<read environment variables>>=
if "canvas" not in config:
  config["canvas"] = {}

if "CANVAS_SERVER" in os.environ:
  config["canvas"]["host"] = os.environ["CANVAS_SERVER"]

if "CANVAS_TOKEN" in os.environ:
  config["canvas"]["access_token"] = os.environ["CANVAS_TOKEN"]
@

At times, we might want to update the configuration file.
When we update the config file, we must ensure that any other part of the 
configuration file is kept, so we write the [[config]] dictionary to the config 
file.

If we get a [[FileNotFoundError]], that means the config directory doesn't 
exist and we must create it.
<<functions>>=
def update_config_file(config, config_file):
  """Updates the config file by writing the config dictionary back to it"""
  try:
    <<open and write config to config file>>
  except FileNotFoundError:
    <<create file's parent directories>>
    <<open and write config to config file>>
<<create file's parent directories>>=
os.makedirs(pathlib.PurePath(config_file).parent)
<<open and write config to config file>>=
with open(config_file, "w") as fd:
  json.dump(config, fd)
@


\section{A command-line interface}%
\label{command-line-interface}

If we run this program, we must first set up a [[canvas]] object, then process 
the command-line arguments.
<<command-line interface>>=
argp = argparse.ArgumentParser(
  description="Scriptable Canvas LMS",
  epilog="Web: https://github.com/dbosk/canvaslms")

subp = argp.add_subparsers(
  title="commands",
  dest="command",
  required=True)

<<add global options to argp>>
<<add subcommands to subp>>

argcomplete.autocomplete(argp)
args = argp.parse_args()

config = read_configuration(args.config_file)

<<run subcommands>>
@


\subsection{The configuration file location}

We want to add an option to point to a configuration file in a non-standard 
location.
<<add global options to argp>>=
argp.add_argument("-f", "--config-file",
  default=f"{dirs.user_config_dir}/config.json",
  help="Path to configuration file "
    f"(default: {dirs.user_config_dir}/config.json) "
    "or set CANVAS_SERVER and CANVAS_TOKEN environment variables.")
@


\subsection{Output format}

Many commands output data in CSV format.
By default we use the tab character as the delimiter, since this gives us 
compatibility with all the POSIX tools available at the command line.
But we provide an option to change the delimiter, \eg to a comma.
<<add global options to argp>>=
argp.add_argument("-d", "--delimiter",
  default="\t",
  help="Sets the delimiter for CSV output, the default is the tab character")
@


\subsection{The subcommands}

Each subcommand will have its own module in the package.
Each such module must have a function [[add_command]] that takes the [[subp]] 
parser as an argument and adds its command and options to that.
For example, the [[login]] command:
The \texttt{login} command is located in [[canvaslms.cli.login]].
<<modules>>=
import canvaslms.cli.login
<<add subcommands to subp>>=
canvaslms.cli.login.add_command(subp)
@

In short, each [[add_command]] must add a subparser 
([[subp.add_parser]]) that will set the [[func]] attribute.
Then we can execute the correct function and let that function check the 
remaining arguments.

Each command function must take three arguments:
\begin{enumerate}
\item the configuration,
\item a Canvas object to use for interaction with Canvas,
\item the processed command-line arguments.
\end{enumerate}
This means that we must read the credentials to create the Canvas object.
One exception is the [[login]] command: this command doesn't need the Canvas 
object as it will be run before there are credentials.
<<run subcommands>>=
if args.func != canvaslms.cli.login.login_command:
  <<create canvas object>>
else:
  canvas = None

if args.func:
  args.func(config, canvas, args)
@

To create the Canvas object, we must read the credentials using the 
[[canvaslms.cli.login]] module.
If there are no credentials, we give an error about running the [[login]] 
command first.
Otherwise, we create the Canvas object named [[canvas]].
<<create canvas object>>=
hostname, token = canvaslms.cli.login.load_credentials(config)

if not (hostname and token):
  err(1, "No hostname or token, run `canvaslms login`")

<<add https to hostname if needed>>

canvas = Canvas(hostname, token)
@

Now, we must specify a URL to the Canvas server, not actually a hostname.
If the hostname already contains \enquote{https}, fine; if not, we should add 
it.
<<add https to hostname if needed>>=
if "://" not in hostname:
  hostname = f"https://{hostname}"
@

\paragraph{The \texttt{courses} command}

The \texttt{courses} command resides in [[canvaslms.cli.courses]] and supports 
the protocol above.
<<modules>>=
import canvaslms.cli.courses
<<add subcommands to subp>>=
canvaslms.cli.courses.add_command(subp)
@

\paragraph{The \texttt{users} command}

The \texttt{users} command resides in [[canvaslms.cli.users]].
<<modules>>=
import canvaslms.cli.users
<<add subcommands to subp>>=
canvaslms.cli.users.add_command(subp)
@

\paragraph{The assignments related commands}

There are two commands related to assignments in the 
[[canvaslms.cli.assignments]] module.
Both are added by the same function call.
<<modules>>=
import canvaslms.cli.assignments
<<add subcommands to subp>>=
canvaslms.cli.assignments.add_command(subp)
@

\paragraph{The submissions related commands}

There are two commands related to submissions in the 
[[canvaslms.cli.submissions]] module.
Both are added by one function call.
<<modules>>=
import canvaslms.cli.submissions
<<add subcommands to subp>>=
canvaslms.cli.submissions.add_command(subp)
@

\paragraph{The \texttt{grade} command}

The \texttt{grade} command is located in [[canvaslms.cli.grade]].
<<modules>>=
import canvaslms.cli.grade
<<add subcommands to subp>>=
canvaslms.cli.grade.add_command(subp)
@

\paragraph{The \texttt{results} command}

The \texttt{results} command is located in [[canvaslms.cli.results]].
<<modules>>=
import canvaslms.cli.results
<<add subcommands to subp>>=
canvaslms.cli.results.add_command(subp)
@
