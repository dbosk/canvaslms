\chapter{The assignments related commands}

This chapter provides the subcommands [[assignments]] and [[assignment]].

The [[assignments]] command lists the assignment groups and the assignments 
therein of a given course.

The [[assignment]] command lists information about a given assignment.


\section{Module outline}

We outline the module:
<<assignments.py>>=
import argparse
import canvasapi
import canvaslms.cli.courses as courses
import canvaslms.hacks.canvasapi
import csv
import json
import os
import pypandoc
import re
import rich.console
import rich.markdown
import sys

<<functions>>

def add_command(subp):
  """Adds the subcommands assignments and assignment to argparse parser subp"""
  add_assignments_command(subp)
  add_assignment_command(subp)

def add_assignments_command(subp):
  """Adds the assignments subcommand to argparse parser subp"""
  <<add assignments command to subp>>

def add_assignment_command(subp):
  """Adds the assignment subcommand to argparse parser subp"""
  <<add assignment command to subp>>
@


\section{Selecting assignments on the command line}

We now provide two functions that sets up the options for selecting an 
assignment on the command line.
These are used by the [[assignment_command]] and [[assignments_command]] 
functions, but can also be used by other commands.

When we select assignments, we have the option to only select those assignments 
with ungraded submissions.
However, this option is not always relevant, so we provide a way to disable it.
But to select an assignment, we must first select a course.

If the [[required]] option is set, we want to make all (relevant) options 
required.
<<functions>>=
def add_assignment_option(parser, ungraded=True, required=False):
  try:
    courses.add_course_option(parser, required=required)
  except argparse.ArgumentError:
    pass

  <<set up options for selecting assignments>>

def process_assignment_option(canvas, args):
  course_list = courses.process_course_option(canvas, args)
  <<process options for selecting assignments to assignments list>>
  return list(assignments_list)
@

As mentioned above, we want to be able to select only assignments with ungraded 
submissions.
Other than that, we want to select assignments in two alternative ways: by 
assignment name or assignment group that an assignment belongs to.
In summary, we want the following options:
\begin{itemize}
\item [[-U]] will filter assignments that have ungraded submissions.
\item [[-a]] will take a regex for assignments.
\item [[-A]] will take a regex for assignment groups.
  Then we can return all assignments in those assignment groups.
\end{itemize}
These regular expressions match either the name or the Canvas identifier.
This lets us add the following arguments.
Remember, we add only the ungraded option if that was requested.
Also, if we want the required version, we want to require either an assignment 
or an assignment group to be specified.
<<set up options for selecting assignments>>=
if ungraded:
  parser.add_argument("-U", "--ungraded", action="store_true",
    help="Filter only assignments with ungraded submissions.")

parser = parser.add_mutually_exclusive_group(required=required)

parser.add_argument("-a", "--assignment",
  required=False, default=".*",
  help="Regex matching assignment title or Canvas identifier, "
    "default: '.*'")

parser.add_argument("-A", "--assignment-group",
  required=False, default="",
  help="Regex matching assignment group title or Canvas identifier.")
@

Now we iterate over the [[course_list]] to get to the assignment groups to then 
filter out the assignments.
We must get all assignments for a course and all assignment groups.
Then we can filter out the matching assignments.
<<process options for selecting assignments to assignments list>>=
assignments_list = []

for course in course_list:
  try:
    ungraded = args.ungraded
  except AttributeError:
    ungraded = False

  all_assignments = list(filter_assignments([course],
    args.assignment,
    ungraded=ungraded))

  try:
    assignm_grp_regex = args.assignment_group
  except AttributeError:
    print("default to .* for group")
    assignm_grp_regex = ".*"

  assignment_groups = filter_assignment_groups(course, assignm_grp_regex)

  for assignment_group in assignment_groups:
    assignments_list += list(filter_assignments_by_group(
        assignment_group, all_assignments))
@


\section{The [[assignments]] subcommand and its options}

We add the subparser for [[assignments]].
<<add assignments command to subp>>=
assignments_parser = subp.add_parser("assignments",
    help="Lists assignments of a course",
    description="Lists assignments of a course. "
      <<assignments help on output format>>)
assignments_parser.set_defaults(func=assignments_command)
add_assignment_option(assignments_parser)
@ Now, that [[assignments_command]] function must take three arguments: 
[[config]], [[canvas]] and [[args]].
We use [[process_assignment_option]] to parse the options that we added with 
the [[add_assignment_option]] function above.
<<functions>>=
def assignments_command(config, canvas, args):
  output = csv.writer(sys.stdout, delimiter=args.delimiter)
  assignment_list = process_assignment_option(canvas, args)
  <<write assignments by assignment group to output>>
@

We then simply get the filtered list from the processing of the assignment 
options, stored in [[assignment_list]] above.
Then we will print the most useful attributes.
<<assignments help on output format>>=
"Output, CSV-format: "
"<course> <assignment group> <assignment name> "
"<due date> <unlock at> <lock at>"
<<write assignments by assignment group to output>>=
for assignment in assignment_list:
  output.writerow([
    assignment.course.course_code,
    assignment.assignment_group.name,
    assignment.name,
    assignment.due_at,
    assignment.unlock_at,
    assignment.lock_at
  ])
@


\section{Filter assignments and assignment groups of a course}

We want to filter out the assignment groups that match a regex.
<<functions>>=
def filter_assignment_groups(course, regex):
  """Returns all assignment groups of course whose name matches regex"""
  name = re.compile(regex)
  return filter(
    lambda group: name.search(group.name),
    course.get_assignment_groups())
@

We also want to filter out the assignments of a course that belong to a given 
assignment group.
<<functions>>=
def filter_assignments_by_group(assignment_group, assignments):
  """Returns elements in assignments that are part of assignment_group"""
  for assignment in assignments:
    if assignment.assignment_group_id == assignment_group.id:
      assignment.assignment_group = assignment_group
      yield assignment
@


\section{The [[assignment]] subcommand and its options}

We add the subparser for [[assignment]].
We use the [[add_course_option]] and [[add_assignment_option]] to set up how 
to select (filter) the courses and assignments.
<<add assignment command to subp>>=
assignment_parser = subp.add_parser("assignment",
    help="Lists assignment details",
    description="Lists assignment details")
assignment_parser.set_defaults(func=assignment_command)
add_assignment_option(assignment_parser)
@ Now, that [[assignment_command]] function must take two arguments: [[canvas]] 
and [[args]].
We use [[process_course_option]] and [[process_assignment_option]] to parse 
the options that we added with the [[add_course_option]] and 
[[add_assignment_option]] functions above.
<<functions>>=
def assignment_command(config, canvas, args):
  console = rich.console.Console()

  assignment_list = process_assignment_option(canvas, args)
  for assignment in assignment_list:
    output = format_assignment(assignment)

    if sys.stdout.isatty():
      <<check if we should use styles>>
      with console.pager(styles=styles, links=True):
        console.print(rich.markdown.Markdown(output,
                                             code_theme="manni"))
    else:
      print(output)
@ Note that we use the theme [[manni]] for the code, as this works in both dark 
and light terminals.

\subsection{Check if we should use styles}

By default, [[rich.console.Console]] uses the [[pydoc.pager]], which uses the 
system pager (as determined by environment variables etc.).
The default usually can't handle colours, so [[rich]] doesn't use colours when 
paging.
We want to check if [[less -r]] or [[less -R]] is set as the pager, in that 
case we can use styles.
<<check if we should use styles>>=
pager = ""
if "MANPAGER" in os.environ:
  pager = os.environ["MANPAGER"]
elif "PAGER" in os.environ:
  pager = os.environ["PAGER"]

styles = False
if "less" in pager and ("-R" in pager or "-r" in pager):
  styles = True
@


\section{Formatting assignments}

Sometimes we want to format the contents of an assignment in the terminal.
The assignment contents given by Canvas is HTML, we want to pipe that through 
[[pandoc]] and convert it to markdown.
<<functions>>=
def format_assignment(assignment):
  """Returns an assignment formatted for the terminal"""
  text = f"""
<<format assignment metadata>>

"""

  if assignment.description:
    instruction = pypandoc.convert_text(
      assignment.description, "md", format="html")
    text += f"## Instruction\n\n{instruction}\n\n"
    <<try to add rubric>>
  else:
    <<try to add rubric>>
    text += f"## Assignment data\n\n```json\n{format_json(assignment)}\n```\n"

  return text
@

\subsection{Assignment metadata}

Now let's look at the metadata to add.
<<format assignment metadata>>=
# {assignment.name}

## Metadata

- Unlocks: {assignment.unlock_at if assignment.unlock_at else None}
- Due:     {assignment.due_at if assignment.due_at else None}
- Locks:   {assignment.lock_at if assignment.lock_at else None}
- Ungraded submissions: {assignment.needs_grading_count}
- Submission type: {assignment.submission_types}
- URL: {assignment.html_url}
- Submissions: {assignment.submissions_download_url}
@

\subsection{Assignment rubric}

We want to format the rubric as well.
<<try to add rubric>>=
try:
  text += f"## Rubric\n\n{format_rubric(assignment.rubric)}\n\n"
except AttributeError:
  pass
@

We'll do this with [[format_rubric]].
It should output a markdown representation of the rubric.
<<functions>>=
def format_rubric(rubric):
  """
  Returns a markdown representation of the rubric
  """
  if not rubric:
    return "No rubric set."

  text = ""
  for criterion in rubric:
    text += f"- {criterion['description']}\n"
    text += f"  - Points: {criterion['points']}\n"
    text += f"  - Ratings: "
    text += "; ".join([
      f"{rating['description'].strip()} ({rating['points']})"
      for rating in criterion["ratings"]
    ]) + "\n"
    text += f"\n```\n{criterion['long_description']}\n```\n\n"

  return text
@

\subsection{Assignment data as raw JSON}

We also want to format the assignment data as JSON.
We must extract all attributes from the assignment object.
<<functions>>=
def format_json(assignment):
  """Returns a JSON representation of the assignment"""
  return json.dumps({
    key: str(value) for key, value in assignment.__dict__.items()
      if not key.startswith("_")
  }, indent=2)
@


\section{Producing a list of assignments}%
\label{list-assignments-function}

We provide the following functions:
\begin{itemize}
  \item [[list_assignments]], which returns all assignments;
  \item [[list_ungraded_assignments]], which returns all ungraded assignments;
  \item [[filter_assignments]], which returns all assignments whose title 
  matches a regular expression.
\end{itemize}
We return the assignments for a list of courses, since we can match several 
courses with a regular expression (using [[filter_courses]]).
<<functions>>=
def list_assignments(assignments_containers, ungraded=False):
  """Lists all assignments in all assignments containers (courses or 
  assignement groups)"""
  for container in assignments_containers:
    if isinstance(container, canvasapi.course.Course):
      course = container
    elif isinstance(container, canvasapi.assignment.AssignmentGroup):
      assignment_group = container
      course = assignment_group.course

    if ungraded:
      assignments = container.get_assignments(bucket="ungraded")
    else:
      assignments = container.get_assignments()

    for assignment in assignments:
      try:
        assignment.course = course
      except NameError:
        pass

      try:
        assignment.assignment_group = assignment_group
      except NameError:
        pass

      yield assignment

def list_ungraded_assignments(assignments_containers):
  return list_assignments(assignments_containers, ungraded=True)
@

We also want to filter out assignments on the title based on regex.
We also take an optional default argument to indicate whether we only want 
ungraded assignments.
<<functions>>=
def filter_assignments(assignments_containers, regex, ungraded=False):
  """Returns all assignments from assignments_container whose
  title matches regex"""
  p = re.compile(regex)
  for assignment in list_assignments(assignments_containers, ungraded=ungraded):
    if p.search(assignment.name):
      yield assignment
    elif p.search(str(assignment.id)):
      yield assignment
@

