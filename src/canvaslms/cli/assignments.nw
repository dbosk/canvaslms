\chapter{The assignments related commands}

This chapter provides the subcommands [[assignments]] and [[assignment]].

The [[assignments]] command lists the assignment groups and the assignments 
therein of a given course.

The [[assignment]] command lists information about a given assignment.


\section{Module outline}

We outline the module:
<<assignments.py>>=
import canvaslms.cli.courses as courses
import csv
import pydoc
import pypandoc
import re
import sys

<<functions>>

def add_command(subp):
  """Adds the subcommands assignments and assignment to argparse parser subp"""
  add_assignments_command(subp)
  add_assignment_command(subp)

def add_assignments_command(subp):
  """Adds the assignments subcommand to argparse parser subp"""
  <<add assignments command to subp>>

def add_assignment_command(subp):
  """Adds the assignment subcommand to argparse parser subp"""
  <<add assignment command to subp>>
@


\section{The [[assignments]] subcommand and its options}

We add the subparser for [[assignments]].
<<add assignments command to subp>>=
assignments_parser = subp.add_parser("assignments",
    help="Lists assignments of a course",
    description="Lists assignments of a course. "
      "Output, CSV-format: <Canvas ID> <assignment name>")
assignments_parser.set_defaults(func=assignments_command)
courses.add_course_option(assignments_parser)
<<set up positional argument for assignment group regex>>
<<set up options for selecting type of assignments>>
@ Now, that [[assignments_command]] function must take three arguments: 
[[config]], [[canvas]] and [[args]].
We use [[process_course_option]] to parse the options that we added with the 
[[add_course_option]] function above.
<<functions>>=
def assignments_command(config, canvas, args):
  output = csv.writer(sys.stdout, delimiter=args.delimiter)
  course_list = courses.process_course_option(canvas, args)

  <<write assignments by assignment group to output>>
@

\subsection{Regex for filtering assignment groups}

We want to be able to list only assignments in particular assignment groups.
<<set up positional argument for assignment group regex>>=
assignments_parser.add_argument("regex",
  default=".*", nargs="?",
  help="Regex for filtering assignment groups, default: '.*'")
@

\subsection{Selecting the type of assignments}

We also want to be able to filter out the type of assignments.
For now, we focus on all or ungraded.
<<set up options for selecting type of assignments>>=
assignments_parser.add_argument("-u", "--ungraded", action="store_true",
  help="Show only ungraded assignments.")
@ We don't need to do any particular processing for this option.


\subsection{Filter and output the list of assignments}

We then simply call the list-assignments function with the [[courses_list]] 
object as a parameter.
Then we will print the most useful attributes (identifiers) of an assignment in 
CSV format.
<<write assignments by assignment group to output>>=
for course in course_list:
  if args.ungraded:
    all_assignments = list(list_ungraded_assignments([course]))
  else:
    all_assignments = list(list_assignments([course]))

  assignment_groups = filter_assignment_groups(course, args.regex)

  for assignment_group in assignment_groups:
    assignments = filter_assignments_by_group(
        assignment_group, all_assignments)

    for assignment in assignments:
      output.writerow([assignment_group.name, assignment.name])
@


\section{Filter assignments and assignment groups of a course}

We want to filter out the assignment groups that match a regex.
<<functions>>=
def filter_assignment_groups(course, regex):
  """Returns all assignment groups of course whose name matches regex"""
  name = re.compile(regex)
  return filter(
    lambda group: name.search(group.name),
    course.get_assignment_groups())
@

We also want to filter out the assignments of a course that belong to a given 
assignment group.
<<functions>>=
def filter_assignments_by_group(assignment_group, assignments):
  """Returns elements in assignments that are part of assignment_group"""
  return filter(
      lambda assignment: assignment.assignment_group_id == assignment_group.id,
      assignments)
@


\section{The [[assignment]] subcommand and its options}

We add the subparser for [[assignment]].
We use the [[add_course_option]] and [[add_assignment_option]] to set up how 
to select (filter) the courses and assignments.
<<add assignment command to subp>>=
assignment_parser = subp.add_parser("assignment",
    help="Lists assignment details",
    description="Lists assignment details")
assignment_parser.set_defaults(func=assignment_command)
add_assignment_option(assignment_parser)
@ Now, that [[assignment_command]] function must take two arguments: [[canvas]] 
and [[args]].
We use [[process_course_option]] and [[process_assignment_option]] to parse 
the options that we added with the [[add_course_option]] and 
[[add_assignment_option]] functions above.
<<functions>>=
def assignment_command(config, canvas, args):
  assignment_list = process_assignment_option(canvas, args)
  for assignment in assignment_list:
    pydoc.pager(format_assignment(assignment))
@


\section{Selecting assignments on the command line}

We now provide two functions that sets up the options for selecting an 
assignment on the command line.
These are used above by the [[assignment_command]], but can also be used by 
other commands.

To select an assignment, we must first select a course.
<<functions>>=
def add_assignment_option(parser):
  try:
    courses.add_course_option(parser)
  except argparse.ArgumentError:
    pass

  <<set up options for selecting assignments>>

def process_assignment_option(canvas, args):
  course_list = courses.process_course_option(canvas, args)
  <<process options for selecting assignments>>
  return list(assignments_list)
@

We add one option [[-a]] to select an assignment.
This is a regular expression which matches the assignment name and identifier.
<<set up options for selecting assignments>>=
parser.add_argument("-a", "--assignment",
  required=False, default=".*",
  help="Regex matching assignment title or Canvas identifier, "
    "default: '.*'")
@

Now we can use the [[course_list]] and [[filter_assignments]] to filter out the 
desired assignments.
<<process options for selecting assignments>>=
assignments_list = filter_assignments(course_list, args.assignment)
@


\section{Formatting assignments}

Sometimes we want to format the contents of an assignment in the terminal.
The assignment contents given by Canvas is HTML, we want to pipe that through 
[[pandoc]] and convert it to markdown.
<<functions>>=
def format_assignment(assignment):
  """Returns an assignment formatted for the terminal"""
  instruction = pypandoc.convert_text(
    assignment.description, "md", format="html")

  return f"""# {assignment.name}

{instruction}

URL: {assignment.html_url}
Submissions: {assignment.submissions_download_url}"""
@


\section{Producing a list of assignments}%
\label{list-assignments-function}

We provide the following functions:
\begin{itemize}
  \item [[list_assignments]], which returns all assignments;
  \item [[list_ungraded_assignments]], which returns all ungraded assignments;
  \item [[filter_assignments]], which returns all assignments whose title 
  matches a regular expression.
\end{itemize}
We return the assignments for a list of courses, since we can match several 
courses with a regular expression (using [[filter_courses]]).
<<functions>>=
def list_assignments(courses):
  for course in courses:
    for assignment in course.get_assignments():
      yield assignment

def list_ungraded_assignments(courses):
  for course in courses:
    for assignment in course.get_assignments(bucket="ungraded"):
      yield assignment
@

We also want to filter out assignments on the title based on regex.
<<functions>>=
def filter_assignments(courses, regex):
  """Returns all assignments from courses whose title matches regex"""
  p = re.compile(regex)
  for assignment in list_assignments(courses):
    if p.search(assignment.name):
      yield assignment
    elif p.search(str(assignment.id)):
      yield assignment
@

