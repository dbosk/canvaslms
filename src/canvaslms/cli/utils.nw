\chapter{Utility functions for CLI commands}

This chapter provides utility functions that are shared across multiple CLI commands to avoid code duplication.

We outline the module:
<<utils.py>>=
import arrow
import datetime

<<functions>>
@

\section{Time formatting utilities}

Function to format ISO timestamps in local time for better readability.
<<functions>>=
def format_local_time(iso_ts):
  """
  Formats an ISO timestamp string in local time (YYYY-MM-DD HH:mm).
  """
  if not iso_ts:
    return "N/A"
  try:
    return arrow.get(iso_ts).to('local').format('YYYY-MM-DD HH:mm')
  except Exception:
    return iso_ts
@

Function to format timestamps in Canvas-compatible UTC format ending with 'Z'.
<<functions>>=
def format_canvas_time(iso_ts):
  """
  Parses an ISO timestamp string as local time and converts to UTC ISO format.
  Returns Canvas-compatible UTC timestamp ending with 'Z'.
  """
  if not iso_ts:
    return None
  try:
    if isinstance(iso_ts, datetime.datetime):
      # Already a datetime object
      dt = iso_ts
      if dt.tzinfo is None:
        dt = dt.replace(tzinfo=arrow.now().tzinfo)
      return dt.astimezone(datetime.timezone.utc).isoformat().replace("+00:00",
                                                                      "Z")
    elif isinstance(iso_ts, datetime.date):
      # Date only, interpret as start of day in local timezone
      dt = datetime.datetime.combine(iso_ts, datetime.time(0, 0))
      dt = dt.replace(tzinfo=arrow.now().tzinfo)
      return dt.astimezone(datetime.timezone.utc).isoformat().replace("+00:00",
                                                                      "Z")
    elif isinstance(iso_ts, arrow.Arrow):
      return iso_ts.to('utc').isoformat().replace("+00:00", "Z")
    elif isinstance(iso_ts, str):
      return arrow.get(iso_ts,
                       tzinfo='local').to('utc').isoformat().replace("+00:00",
                                                                     "Z")
  except Exception as e:
    raise ValueError(f"Invalid date/time format: {e}")
@

\section{Date parsing utilities}

Function to parse date strings in various human-readable formats and convert 
them to Canvas-compatible UTC timestamps. This function supports multiple 
common date formats and provides flexible parsing for user input.
<<functions>>=
def parse_date(date_str):
  """Parse a date string using arrow with multiple format attempts
  
  Returns a Canvas-compatible UTC timestamp ending with 'Z'
  """
  if not date_str or date_str.lower() in ['none', 'clear', '']:
    return None
    
  # Try common formats in order of preference
  formats = [
    None,  # ISO format (arrow's default)
    'YYYY-MM-DD HH:mm:ss',
    'YYYY-MM-DD HH:mm', 
    'YYYY-MM-DD',
    'MMM DD YYYY',
    'MMMM DD, YYYY',
    'MM/DD/YYYY',
    'DD/MM/YYYY',
    'YYYY/MM/DD'
  ]
  
  for fmt in formats:
    try:
      if fmt is None:
        # Use format_canvas_time for Canvas compatibility
        return format_canvas_time(arrow.get(date_str))
      else:
        # Use format_canvas_time for Canvas compatibility
        return format_canvas_time(arrow.get(date_str, fmt))
    except (arrow.parser.ParserError, ValueError):
      continue
  
  # If nothing worked, try natural language parsing
  try:
    import dateutil.parser
    parsed_date = dateutil.parser.parse(date_str)
    # Use format_canvas_time for Canvas compatibility
    return format_canvas_time(arrow.get(parsed_date))
  except (ImportError, ValueError):
    pass
    
  raise ValueError(f"Could not parse date: '{date_str}'. "
                  "Try formats like: YYYY-MM-DD, YYYY-MM-DD HH:MM, or MM/DD/YYYY")
@