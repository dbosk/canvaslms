\chapter{The \texttt{grade} command}

This chapter provides the subcommand [[grade]], which is used to grade a 
submission.

We outline the module:
<<grade.py>>=
import canvaslms.cli.submissions as submissions

<<functions>>

def add_command(subp):
  """Adds grade command to the argparse subparser subp"""
  <<add grade command>>
@

\section{The [[grade]] subcommand and its options}

We add the subparser for [[grade]].
We must identify submissions, for this we use the options provided by 
[[add_submission_options]] (\cref{submission-options}).
<<add grade command>>=
grade_parser = subp.add_parser("grade",
    help="Grades an assignment")
grade_parser.set_defaults(func=grade_command)
submissions.add_submission_options(grade_parser)
<<set up options for grading>>
@ Now, that [[grade_command]] function must take three arguments: [[config]], 
[[canvas]] and [[args]].
It must also do the processing for the submissions options using 
[[process_submission_options]].
<<functions>>=
def grade_command(config, canvas, args):
  submission_list = submissions.process_submission_options(canvas, args)
  <<process options for grading>>
  <<grade the submissions>>
@

\subsection{The options for grading}

We introduce two options:
\begin{itemize}
\item [[-g]] or [[--grade]], which is mandatory and sets the grade of the 
submission.
This can be almost anything: Canvas accepts points, percentages or letter 
grades and will convert accordingly.
\item [[-m]] or [[--message]], which is optional and sets a comment.
\end{itemize}
<<set up options for grading>>=
grade_parser.add_argument("-g", "--grade", required=True,
  help="The grade to set for the submissions")
grade_parser.add_argument("-m", "--message",
  help="A comment to the student")
@

When we process the options, we will set up a dictionary that will be passed to 
the Canvas API.
It should be a dictionary of dictionaries, because we will unpack it using the 
[[**]]-operator to have two named arguments: [[submission]] and [[comment]].
<<process options for grading>>=
results = {}
results["submission"] = {"posted_grade": args.grade}
if args.message:
  results["comment"] = {"text_comment": args.message}
@

Now we can update the submission.
<<grade the submissions>>=
for submission in submission_list:
  submission.edit(**results)
@

