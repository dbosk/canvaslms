\chapter{The \texttt{submissions grade} command}

This chapter provides the subcommand [[submissions grade]], which is used to 
grade submissions. This command was previously a standalone [[grade]] command 
but has been integrated into the submissions module to provide a more 
organized command hierarchy.

The [[submissions grade]] command can either set grades and comments 
programmatically or open the Canvas SpeedGrader interface for interactive 
grading.

We outline the module:
<<grade.py>>=
from canvaslms.cli import submissions, users
import canvaslms.cli
import canvasapi.exceptions
import webbrowser

<<functions>>

def add_command(subp):
  """Adds grade command to the argparse subparser subp"""
  <<add grade command>>
@

\section{The [[submissions grade]] subcommand and its options}

The [[submissions grade]] subcommand (previously the standalone [[grade]] 
command) provides functionality for grading submissions. It can operate in 
two modes: programmatic grading with command-line options or interactive 
grading by opening the Canvas SpeedGrader interface.

The command uses powerful regex matching to select submissions, which requires 
careful attention to ensure the correct submissions are targeted. Hence the 
warning: \emph{hic sunt dracones} (here be dragons).

We add the subparser for [[grade]].
We must identify submissions, for this we use the options provided by 
[[add_submission_options]] (\cref{submission-options}).
We will add [[required=True]] so that we get all options as required.
<<add grade command>>=
grade_parser = subp.add_parser("grade",
  help="Grades assignments (hic sunt dracones!)",
  description="Grades assignments. ***Hic sunt dracones [here be dragons]***: "
    "the regex matching is very powerful, "
    "be certain that you match what you think!")
grade_parser.set_defaults(func=grade_command)
submissions.add_submission_options(grade_parser, required=True)
<<set up options for grading>>
@ Now, that [[grade_command]] function must take three arguments: [[config]], 
[[canvas]] and [[args]].
It must also do the processing for the submissions options using 
[[process_submission_options]].
<<functions>>=
def grade_command(config, canvas, args):
  submission_list = submissions.process_submission_options(canvas, args)
  <<process options for grading>>
  <<grade the submissions>>
@

\subsection{The options for grading}

We introduce two options:
\begin{itemize}
\item [[-g]] or [[--grade]], which sets the grade of the submission.
This can be almost anything: Canvas accepts points, percentages or letter 
grades and will convert accordingly.
\item [[-m]] or [[--message]], which sets a comment.
\item [[-v]] or [[--verbose]], which will cause [[canvaslms]] to print what 
grade is set for which assignment and which student.
\end{itemize}
Both [[-g]] and [[-m]] are optional.
If neither is given, the SpeedGrader page of each submission is opened in the 
web browser.
In that case, [[-v]] make not much sense.
<<set up options for grading>>=
grade_options = grade_parser.add_argument_group(
  "arguments to set the grade and/or comment, "
  "if none given, opens SpeedGrader")
grade_options.add_argument("-g", "--grade",
  help="The grade to set for the submissions")
grade_options.add_argument("-m", "--message",
  help="A comment to the student")
@

When we process the options, we will set up a dictionary that will be passed to 
the Canvas API.
It should be a dictionary of dictionaries, because we will unpack it using the 
[[**]]-operator to have two named arguments: [[submission]] and [[comment]].
<<process options for grading>>=
results = {}
if args.grade:
  results["submission"] = {"posted_grade": args.grade}
if args.message:
  results["comment"] = {"text_comment": args.message}
@

Now we can process the submissions: either update the submission, if the grade 
or message options were given, or open the submission in SpeedGrader.
<<grade the submissions>>=
if not args.grade and not args.message:
  for submission in submission_list:
    webbrowser.open(submissions.speedgrader(submission))
else:
  for submission in submission_list:
    <<if verbose, print [[submission]] and [[results]] to stdout>>
    <<grade submission with error handling>>
@

\subsection{Verbose output when setting grades}

Now, we want a verbosity option to control whether or not to print what's 
happening (even for non-errors).
Using the option turns verbose mode on, it's off by default.
<<set up options for grading>>=
grade_parser.add_argument("-v", "--verbose",
  action="store_true", default=False,
  help="Increases verbosity, prints what grade is set "
       "for which assignment for which student.")
<<if verbose, print [[submission]] and [[results]] to stdout>>=
if args.verbose:
  id = f"{submission.assignment.course.course_code} " \
       f"{submission.assignment.name} {submission.user}"

  event = ""
  try:
    event += f" grade = {args.grade}"
  except:
    pass
  try:
    event += f" msg = '{args.message}'"
  except:
    pass

  print(f"{id}:{event}")

@

\subsection{Error handling for grading operations}

We need to handle Canvas API exceptions when setting grades.
Common issues include unauthorized access when assignments are not published,
or when the user doesn't have permission to grade the assignment.
<<grade submission with error handling>>=
try:
  submission.edit(**results)
except canvasapi.exceptions.Forbidden as err:
  canvaslms.cli.err(1, 
    f"Permission denied when grading {submission.assignment.name} "
    f"for {submission.user}. "
    f"Hint: The assignment may not be published yet, or you may not have "
    f"permission to grade this assignment. "
    f"Canvas error: {err}")
except canvasapi.exceptions.Unauthorized as err:
  canvaslms.cli.err(1,
    f"Unauthorized to grade {submission.assignment.name} "
    f"for {submission.user}. "
    f"Hint: Check your Canvas permissions or verify your authentication token. "
    f"Canvas error: {err}")
except canvasapi.exceptions.CanvasException as err:
  canvaslms.cli.err(1,
    f"Canvas API error when grading {submission.assignment.name} "
    f"for {submission.user}. "
    f"Canvas error: {err}")
@
