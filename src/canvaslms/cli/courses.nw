\chapter{The \texttt{courses} subcommand}

This chapter provides everything related to courses.
Firstly, it provides the [[courses]] subcommand.
Secondly, it provides some useful functions for working with courses that can 
be used by other subcommands.

We outline the module:
<<courses.py>>=
import csv
import re
import sys

<<functions>>

def add_command(subp):
  """Adds the subcomand and its options to argparse subparser subp"""
  courses_parser = subp.add_parser("courses",
    help="Lists your courses",
    description="Lists your courses. Output, CSV-format: "
      "<course-code> <course-name> <start-time> <end-time>")
  courses_parser.set_defaults(func=courses_command)
  <<add arguments>>
@

The [[courses]] subcommand takes one positional argument, that is a regular 
expression for filtering the courses.
<<add arguments>>=
courses_parser.add_argument("regex",
  default=".*", nargs="?",
  help="Regex for filtering courses, default: '.*'")
@


\section{Producing a list of courses, [[courses_command]]}%
\label{list-courses-function}

We provide the function~[[courses_command]] which will be called by the main 
argument parser.
<<functions>>=
def courses_command(config, canvas, args):
  """Prints the users list of courses in CSV format to stdout"""
  output = csv.writer(sys.stdout, delimiter=args.delimiter)

  course_list = filter_courses(canvas, args.regex)
  for course in course_list:
    <<write course data to output>>
@ We will cover the set up and processing of the options in the following 
sections.


\section{Output the course data}

We have the course data in a [[course]] object.
Now we just print the interesting data about it.
<<write course data to output>>=
output.writerow([
  course.course_code,
  course.name,
  course.start_at,
  course.end_at
])
@


\section{Find course based on course code}%
\label{search-course-code}
\label{filter-courses}

We provide the function~[[filter_courses]] that will filter the list of courses 
based on a regular expression~[[regex]].
<<functions>>=
def filter_courses(canvas, regex):
  courses = canvas.get_courses()
  p = re.compile(regex)
  for course in courses:
    <<yield course matching regex>>
@

We will match a course if the [[regex]] (compiled into [[p]]) will match any of 
the attributes [[course_code]] or [[name]] of a course.
<<yield course matching regex>>=
if p.search(course.name):
  yield course
elif p.search(course.course_code):
  yield course
elif p.search(str(course.id)):
  yield course
@


\section{Selecting a course on the command line}

We provide one way to identify a course: by matching the course code, course 
name or Canvas ID against a regular expression.

We provide a function that can be used by other subcommands to set up options 
for selecting a course in this way.
<<functions>>=
def add_course_option(parser):
  """Adds the -c option to argparse parser to filter out courses"""
  <<set up options for selecting courses>>

def process_course_option(canvas, args):
  """Processes -c option, returns a list of courses"""
  <<process options for selecting courses>>
  return list(course_list)
@

We need a course, so we require a regular expression that matches the course 
title, course code or Canvas identifier.
<<set up options for selecting courses>>=
parser.add_argument("-c", "--course", required=False, default=".*",
  help="Regex matching courses on title, course code or Canvas ID, "
    "default: '.*'")
@

When we check for either of these arguments, we set up a list of courses, 
[[course_list]], that will be returned.
<<process options for selecting courses>>=
course_list = filter_courses(canvas, args.course)
@ We use the [[filter_courses]] from \cref{filter-courses}.

