\chapter{Hackish improvements to the \texttt{canvasapi} module}

In this module we provide some hackish improvements to the \texttt{canvasapi} 
package.
We automatically run all hacks upon import.
<<canvasapi.py>>=
"""A module that modifies the classes of the canvasapi package"""

import importlib
import inspect
import sys

<<functions>>

# Loads all hacks
this_module = sys.modules[__name__]

# automatically execute all functions in this module
for _, function in inspect.getmembers(this_module, inspect.isfunction):
  function()
@


\section{Make classes comparable and hashable}

Since none of the classes in [[canvasapi]] defines the [[__eq__]] method, they 
all use the default which uses [[is]].
However, it makes more sense to actually compare what the objects represent,
so if two [[User]] objects represent the same user (the same Canvas ID), then 
they should be considered equal, even if the objects themselves are different.
The same applies for the hashable property.
A [[User]] object represents a fixed user that never changes, so we can use the 
type and Canvas ID to hash objects.
Adding these two, will allow us to put these objects into sets, for instance.
<<functions>>=
def make_classes_comparable():
  """Improves the classes by adding __eq__ and __hash__ methods"""
  <<improve eq method for classes>>
@

We want to do this for several classes.
<<improve eq method for classes>>=
# classes to improve in each module
CANVASAPI_CLASSES = {
  "assignment": ["Assignment", "AssignmentGroup"],
  "submission": ["Submission"],
  "user": ["User"]
}
@

We then want to load all the relevant modules given above.
<<improve eq method for classes>>=
canvasapi_modules = {}

# import all modules
for module_name in CANVASAPI_CLASSES:
  canvasapi_modules[module_name] = \
    importlib.import_module(f"canvasapi.{module_name}")
@

Then we want to have the equality function to replace with.
This one checks that the type is the same and then that the Canvas ID is the 
same.
<<improve eq method for classes>>=
def is_equal(self, other):
  """Tests if the two Canvas objects self and other refer to the same object"""
  return type(self) == type(other) and self.id == other.id

def canvas_hash(self):
  """Returns a hash suitable for Canvas objects"""
  return hash(type(self)) ^ hash(self.id)
@

Finally, we go through all the modules, extract the members.
For each member, we check if it's a member to modify, if so, we modify it.
<<improve eq method for classes>>=
for module_name, module in canvasapi_modules.items():
  module_members = inspect.getmembers(module)
  for obj_name, obj in module_members:
    if obj_name in CANVASAPI_CLASSES[module_name]:
      obj.__eq__ = is_equal
      obj.__hash__ = canvas_hash
@
