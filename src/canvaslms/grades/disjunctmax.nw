\section{Disjunctive maximum}

In this module we want to provide the disjunctive maximum way of computing 
\emph{one grade} from \emph{several assignments}.
<<module doc>>=
Module that summarizes an assignment group by disjunctive maximum.

Disjunctive maximum means: 

  1) At least one assignment must have a non-F grade.
  2) If there are more than one assignment with a non-F grade, we take the 
     maximum as the grade. A--E are valued higher than P. The grade F is valued 
     the lowest.

We fail if there is an assignment which doesn't have A--F or P/F grading 
scales.
@

We have one requirement on the summary module: it must contain a function 
[[summarize_group]] that takes two arguments;
the first being a list of assignments,
the second being a list of users.
The [[summarize_group]] function is the function that the above code will call.
This gives the following outline of the module.
<<disjunctmax.py>>=
"""
<<module doc>>
"""

import datetime as dt
from canvaslms.cli import results

<<helper functions>>

def summarize_group(assignments_list, users_list):
  """Summarizes a particular set of assignments (assignments_list) for all
  users in users_list"""

  for user in users_list:
    grade, grade_date, graders = summarize(user, assignments_list)
    yield [user, grade, grade_date, *graders]
@


\subsection{Summarizing grades: assignment grades to component grade}%
\label{disjunctmax-summarize}

Now we will describe the [[summarize]] helper function.
We want to establish two things: the most recent date and a suitable grade.

For the most recent date, we just add them to a list as we iterate through the 
submissions.
We do the same for grades, as we iterate through we add any grade to a list.
In the end we compute the maximums of both lists.
<<helper functions>>=
def summarize(user, assignments_list):
  """Extracts user's submissions for assignments in assingments_list to 
  summarize results into one grade and a grade date. Summarize by disjunctive 
  maximum."""

  grades = []
  dates = []
  graders = []

  for assignment in assignments_list:
    submission = assignment.get_submission(user,
                                           include=["submission_history"])
    submission.assignment = assignment
    graders += results.all_graders(submission)

    grade = submission.grade

    if grade is None:
      grade = "F"

    grades.append(grade)

    grade_date = submission.submitted_at or submission.graded_at

    if grade_date:
      grade_date = dt.date.fromisoformat(grade_date.split("T")[0])
      dates.append(grade_date)

  return (grade_max(grades), max(dates), graders)
@

\subsection{Computing the maximum}

To compute the maximum for the A--E grades; we will convert the grades into 
integers, compute the maximum, round the value to an integer and convert back.
We also include P/F here, since we can count them as lower than A--E.
<<helper functions>>=
def grade_max(grades):
  """Takes a list of A--E/P--F grades, returns the maximum."""
  num_grades = map(grade_to_int, grades)
  max_grade = max(num_grades)
  return int_to_grade(max_grade)

def grade_to_int(grade):
  grade_map = {"F": -1, "P": 0, "E": 1, "D": 2, "C": 3, "B": 4, "A": 5}
  return grade_map[grade]

def int_to_grade(int_grade):
  grade_map_inv = {-1: "F", 0: "P", 1: "E", 2: "D", 3: "C", 4: "B", 5: "A"}
  return grade_map_inv[int_grade]
@

