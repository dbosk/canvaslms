\section{Maximum grade, latest date with surveys}

In this module we want to provide the disjunctive maximum way of computing 
\emph{one grade} from \emph{several assignments}.
But we also want to include ungraded surveys.
<<module doc>>=
Module that summarizes an assignment group by maximizing grade and date. This 
module is the same as `canvaslms.grades.disjunctmax`, but also includes 
ungraded surveys (for instance quiz with points, where the number of points is 
ignored). Consequently all assignments must have a date.

This function also doen't fail when there is a grade other than A--F or P/F 
present. Such grades are all treated as F.
@

We have one requirement on the summary module: it must contain a function 
[[summarize_group]] that takes two arguments;
the first being a list of assignments,
the second being a list of users.
The [[summarize_group]] function is the function that the above code will call.
This gives the following outline of the module.
<<maxgradesurvey.py>>=
"""
<<module doc>>
"""

import datetime as dt
from canvaslms.grades.disjunctmax import grade_max

<<helper functions>>

def summarize_group(assignments_list, users_list):
  """Summarizes a particular set of assignments (assignments_list) for all
  users in users_list"""

  for user in users_list:
    grade, grade_date = summarize(user, assignments_list)
    yield (user, grade, grade_date)
@


\subsection{Summarizing grades: assignment grades to component grade}

Now we will describe the [[summarize]] helper function.
We want to establish two things: the most recent date and a suitable grade.

For the most recent date, we just add them to a list as we iterate through the 
submissions.
We do the same for grades, as we iterate through we add any grade to a list.
In the end we compute the maximums of both lists.

The key difference to the [[summarize]] function in 
\cref{disjunctmax-summarize} is the translation of other grades to F.
<<helper functions>>=
def summarize(user, assignments_list):
  """Extracts user's submissions for assignments in assingments_list to 
  summarize results into one grade and a grade date. Summarize by disjunctive 
  maximum."""

  grades = []
  dates = []

  for assignment in assignments_list:
    submission = assignment.get_submission(user)
    grade = submission.grade

    if grade is None or grade not in "ABCDEPF":
      grade = "F"

    grades.append(grade)

    grade_date = submission.submitted_at or submission.graded_at

    if grade_date:
      grade_date = dt.date.fromisoformat(grade_date.split("T")[0])
      dates.append(grade_date)

  if len(dates) < len(grades):
    return ("F", None)
  return (grade_max(grades), max(dates))
@

