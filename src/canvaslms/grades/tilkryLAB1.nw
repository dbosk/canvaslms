\section{The Applied Crypto course}

In this module we'll describe a more complicated way of calculating the grades.
This is used for the LAB1 module in DD2520 Applied Crypto at KTH.

We have the following grading criteria for the intended learning outcomes.
\begin{longtable}[]{%
>{\raggedright}p{0.25\columnwidth}%
>{\raggedright}p{0.25\columnwidth}%
>{\raggedright}p{0.25\columnwidth}%
>{\raggedright}p{0.25\columnwidth}%
}
\caption{Grading criteria for the intended learning outcomes in DD2520 Applied 
Crypto at KTH.} \tabularnewline
\toprule
ILO &
E/P &
C &
A \tabularnewline
\midrule
\endhead
describe cryptographic concepts and explain their security properties, &
from simple examples &
from simple system descriptions &
from complex system descriptions \tabularnewline
\midrule
%ASSESSMENT
%
%written assignments, formative: seminar exercises
use basic terminology in computer security and cryptography correctly &
with few mistakes &
with few and only minor mistakes &
with clear and concise explanations \tabularnewline
\midrule
%ASSESSMENT
%
%written assignments, labs submissions, lab solution presentations;
%formative: seminar exercises
find and use documentation of cryptographic libraries and standards, &
enough to solve labs and cover basics for discussions and hand-ins with
some scientific resources \tabularnewline
\midrule
%ASSESSMENT
%
%written assignments, lab submissions; formative: seminar exercises
identify and categorise threats against a cryptographic IT-system at a
conceptual level, suggest appropriate countermeasures and present the
reasoning to others &
with some appropriate counter-measures and basic argumentation, with
sufficient clarity for fellow students and for teachers to understand,
with few mistakes &
with some appropriate counter-measures and basic argumentation, with
demonstrated correct understanding, with enough relevant detail and few
tangents &
with arguably most appropriate counter-measures and nuanced
argumentation, with logical and pedagogical flow and concise expression
of all (and only) relevant and correct details \tabularnewline
%ASSESSMENT
%
%written assignments, labs submissions, lab solution presentations;
%formative: seminar exercises
\bottomrule
\end{longtable}

Then we have some mandatory and some optional assignments.
\begin{itemize}
\item	Cryptanalysis of Ciphertexts
\item	Optional: Cryptopals (C, B, A)
\item	Implement AES (Kattis Problem)
\item	Optional: AES presentation (C, A)
\item	MANDATORY Seminar (pick 1/2 or 2/2): usability (Sonja)  ON CAMPUS
\item	MANDATORY Seminar (pick 15/2 or 16/2): Impact considerations around crypto systems (Sonja)  ON CAMPUS
\item	MANDATORY Design Considerations (after the impact considerations seminar)
\item	MANDATORY Lab (pick 23/2 or 1/3): Introduction to ProVerif  (Karl and Jesper)  ON CAMPUS
\item	Optional: Side channels (C, B, A)
\item	Optional: Secure multi-party computation (C, B, A)
\end{itemize}
The assignments are designed in such a way that the optional assignments let 
the students show that they fulfil the higher criteria.
The mandatory ones just ensure the grading criteria for E.

Each assignment in turn has assignment-specific grading criteria to map grading 
to the general grading criteria above.
The assignment-specific grading criteria are mapped to points.

\begin{longtable}[]{%
>{\raggedright}p{0.3\columnwidth}%
>{\raggedright}p{0.2\columnwidth}%
>{\raggedright}p{0.2\columnwidth}%
>{\raggedright}p{0.2\columnwidth}%
>{\raggedright}p{0.2\columnwidth}%
}
\caption{Assignment-oriented grading criteria for the assignments in DD2520 
Applied Crypto at KTH.}\tabularnewline
\toprule
Higher LAB1 grades given E of mandatory &
Optional assignments for D &
Optional assignments for C &
Optional assignments for B &
Optional assignments for A\tabularnewline
\midrule
\endhead
\(\ceil{\sum}\) is the rounded up sum of points from optional assignments, 
where \(1A=2.5, 1B=1.5, 1C=1.\) &
\(\ceil{\sum} = 1\) &
\(\ceil{\sum} = 2\) &
\(\ceil{\sum} = 3\) &
\(\sum \geq 4\)\tabularnewline
\midrule
possible instantiations & 1C & 2C or 1B & 2B or 1A or (1B+1C) & 2A or
(1A+1B) or (1A+2C)\tabularnewline
\bottomrule
\end{longtable}

We let the mandatory assignments have a grading scale that translates to P 
whenever a mandatory assignment is passed.
The optional assignments will not have any grading scale, but we'll use the 
points.
This way we can simply sum up the points of the optional assignments and 
translate the points to a grade using the table above.

We should not that this translation is not perfect.
As is pointed out in by the possible instantiations above: technically one can 
get an A by doing all the four optional assignments at the lowest level (\(C = 
1\)).
However, for now I'm stuck with this system that I inherited with the course.

In this module we want to provide a summarizer for this grading system.
<<module doc>>=
Summarizes the assignments of LAB1 in the course DD2520 Applied Crypto at KTH.

There are some mandatory assignments graded P/F. They must all be P.

There are also some optional assigments. They're given scores between 0 and 
2.5. The sum of the scores is used to determine the grade. If the sum is more 
than 4, the grade is A.
@

We have one requirement on the summary module: it must contain a function 
[[summarize_group]] that takes two arguments;
the first being a list of assignments,
the second being a list of users.
The [[summarize_group]] function is the function that the above code will call.
This gives the following outline of the module.
<<tilkryLAB1.py>>=
"""
<<module doc>>
"""

import datetime as dt
from canvaslms.cli import results
from canvasapi.exceptions import ResourceDoesNotExist
import logging
from math import ceil

<<helper functions>>

def summarize_group(assignments_list, users_list):
  """
  Summarizes a particular set of assignments (assignments_list) for all
  users in users_list
  """

  for user in users_list:
    grade, grade_date, graders = summarize(user, assignments_list)
    yield [user, grade, grade_date, *graders]
@


\subsection{Summarizing grades: assignment grades to component grade}

Now we will describe the [[summarize]] helper function.
We want to establish three things: the most recent date, a suitable grade and 
the graders.

For the most recent date, we just add them to a list as we iterate through the 
submissions.
Then we'll pick the most recent date from the list.

We do the same for grades, as we iterate through we add any grade to either of 
two lists: [[mandatory]] or [[optional]].
The mandatory assignments have P/F grades.
The optional assignments have grades between 0 and 2.5.
<<helper functions>>=
def summarize(user, assignments_list):
  """
  Extracts user's submissions for assignments in assingments_list to summarize 
  results into one grade and a grade date.

  Summarize according to tilkry grading scheme.
  """

  mandatory = []
  optional = []
  dates = []
  graders = []

  for assignment in assignments_list:
    try:
      submission = assignment.get_submission(user,
                                             include=["submission_history"])
    except ResourceDoesNotExist:
      <<handle missing submission>>

    submission.assignment = assignment
    graders += results.all_graders(submission)

    grade = submission.grade

    <<add [[grade]] to either [[mandatory]] or [[optional]]>>

    grade_date = submission.submitted_at or submission.graded_at

    if grade_date:
      grade_date = dt.date.fromisoformat(grade_date.split("T")[0])
      dates.append(grade_date)

  if not all(grade == "P" for grade in mandatory):
    final_grade = "F"
  else:
    <<calculate [[final_grade]] based on [[optonal]]>>

  if dates:
    final_date = max(dates)
  else:
    final_date = None
    final_grade = None

  return (final_grade, final_date, graders)
@

\subsection{Sorting out mandatory and optional assignments}

If an assignment is mandatory or optional determines what to do if there is no 
submission.
This means that we can't use the grade of the submission (float or P/F) to 
determine if the assignment is mandatory or optional.
Based on the names listed above, the system will be that an optional assignment 
has its name prefixed with \enquote{Optional:}.
(However, we'll include a few different prefixes.)
<<add [[grade]] to either [[mandatory]] or [[optional]]>>=
if is_optional(assignment):
  <<handle optional>>
else:
  <<handle mandatory>>
<<helper functions>>=
def is_optional(assignment):
  assignment_name = assignment.name.casefold()
  return (
        assignment_name.startswith("optional:")
     or assignment_name.startswith("(optional)")
  )
@

If the assignment is mandatory, we'll add the grade to [[mandatory]].
If there is no grade or submission, we'll treat it as an F.
<<handle mandatory>>=
if grade is None:
  grade = "F"
elif grade not in "PF":
  logging.warning(f"Invalid grade {grade} for {user} in {assignment}, "
                  "using F")
  grade = "F"
mandatory.append(grade)
<<handle missing submission>>=
if not is_optional(assignment):
  logging.warning(f"No submission for {user} in {assignment}, using F")
  mandatory.append("F")
  continue
@

If the assignment is optional, we'll add the grade to [[optional]]---if there 
is any.
If there is no grade or submission, we'll just skip it.
<<handle optional>>=
if grade is None:
  continue
try:
  grade = float(grade)
  optional.append(grade)
except ValueError:
  logging.warning(f"Invalid grade {grade} for {user} in {assignment}, "
                  "skipping.")
  continue
@

\subsection{Calculating the final grade}

The final grade is calculated based on the sum of the optional assignments.
<<calculate [[final_grade]] based on [[optonal]]>>=
if sum(optional) >= 4:
  final_grade = "A"
elif ceil(sum(optional)) >= 3:
  final_grade = "B"
elif ceil(sum(optional)) >= 2:
  final_grade = "C"
elif ceil(sum(optional)) >= 1:
  final_grade = "D"
else:
  final_grade = "E"
