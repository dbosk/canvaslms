\section{Conjunctive average with surveys}

We have one requirement on the summary module: it must contain a function 
[[summarize_group]] that takes two arguments;
the first being a list of assignments,
the second being a list of users.
The [[summarize_group]] function is the function that the above code will call.
This gives the following outline of the module.
<<conjunctavgsurvey.py>>=
"""
This module is the same as `canvaslms.grades.conjunctavg` except that any 
submissions with grades other than A--F and P/F are treated as P. For instance, 
numeric grades (like points). Also, all submissions must have a date. This 
makes this module useful for including mandatory, ungraded surveys.
"""

import datetime as dt
from canvaslms.grades.conjunctavg import a2e_average
from canvaslms.cli import results
from canvasapi.exceptions import ResourceDoesNotExist

<<helper functions>>

def summarize_group(assignments_list, users_list):
  """Summarizes a particular set of assignments (assignments_list) for all
  users in users_list"""

  for user in users_list:
    grade, grade_date, graders = summarize(user, assignments_list)
    yield [user, grade, grade_date, *graders]
@


\subsection{Summarizing grades: assignment grades to component grade}

Now we will describe the [[summarize]] helper function.
We want to establish two things: the most recent date and a suitable grade.

For the most recent date, we just add them to a list as we iterate through 
them.
Then we can simply take the maximum.

For the grade, as we iterate through we look for P/F and A--E grades.
We can then check for Fs among the P/F grades, if we find an F the summarized 
grade will be an F.
If we find no Fs, then we can compute the average over all A--E grades and use 
that as the final grade.

If we encounter a grade that is not A--F nor P/F, then it is assumed to be a 
survey, which is treated as a P.
<<helper functions>>=
def summarize(user, assignments_list):
  """
  Extracts user's submissions for assignments in assingments_list to summarize 
  results into one grade and a grade date. Summarize by conjunctive average.

  If some submission lacks date, return ("F", None).
  """

  pf_grades = []
  a2e_grades = []
  dates = []
  graders = []

  for assignment in assignments_list:
    try:
      submission = assignment.get_submission(user,
                                            include=["submission_history"])
    except ResourceDoesNotExist:
      pf_grades.append("F")
      continue

    grade = submission.grade
    graders += results.all_graders(submission)

    if grade is None:
      grade = "F"

    if grade in "ABCDE":
      a2e_grades.append(grade)
    elif grade in "PF":
      pf_grades.append(grade)
    elif grade == "Fx":
      pf_grades.append("F")
    else:
      pf_grades.append("P")

    grade_date = submission.submitted_at or submission.graded_at

    if grade_date:
      grade_date = dt.date.fromisoformat(grade_date.split("T")[0])
      dates.append(grade_date)

  if all(map(lambda x: x == "P", pf_grades)):
    final_grade = "P"
    if a2e_grades:
      final_grade = a2e_average(a2e_grades)

  if dates:
    final_date = max(dates)
  else:
    final_date = None
    final_grade = None

  if len(dates) < len(pf_grades) + len(a2e_grades):
    final_grade = "F"

  return (final_grade, final_date, graders)
@
