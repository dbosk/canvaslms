\chapter{Computing grades from groups of assignments}
\label{summary-modules}

This is the documentation for the \texttt{canvaslms.grades} package.
<<module doc>>=
This package contains modules to summarize assignment groups in different ways. 
These modules are used with the `-S` option of the `results` command.

For a module to be used with the `canvaslms results -S module` option, the 
module must fulfil the following:

  1) It must contain a function named `summarize_group`.
  2) `summarize_group` must take two arguments:

       I) `assignment_list`, a list of `canvasapi.assignment.Assignment`
          objects. These assignments all belong to the same group, \ie their
          grades should be used to compute the student's final grade.

      II) `users_list`, a list of `canvasapi.user.User` objects. This is a
          list of users, i.e. students, for whom to compute the grades.

  3) The return value should be a list of lists. Each list should have the
     form `[user, grade, grade date, grader 1, ..., grader N]`.

For more details, see Chapter 11 of the `canvaslms.pdf` file found among the 
release files at:

  https://github.com/dbosk/canvaslms/releases
@

Also see \cref{results-command} for details on the [[results]] command.

Now, this package's init module ([[__init__.py]], refered to by 
[[<<init.py>>]]) only needs this:
<<init.py>>=
"""
<<module doc>>
"""
@

Let's look at a simple example module, [[<<mysum.py>>]].
In the [[summarize_group]] function, we extract the all the grades, the dates 
and the graders and return the tuple (list) expected.
<<mysum.py>>=
import datetime as dt
from canvaslms.cli import results

def summarize_group(assignments, users):
  """
  Summarizes the grades for all assignments into one grade for each user.
  """
  for user in users:
    grades = []
    recent_date = dt.date(year=1970, month=1, day=1)
    graders = []

    <<extract grades, dates and graders from all assignments>>

    yield [user, final_grade(grades), recent_date, *graders]
@

We leave for the reader to imagine all the possibilities of the 
[[final_grade(grades)]] function that is supposed to take the list of grades 
and turn them into one final grade.
(For more elaborate and complete examples, where the [[final_grade]] function 
is actually implemented, see the summarizing functions implemented in the 
remaining sections of this chapter.)

To extract the data we need, we simply iterate through all the assignments and 
fetch the user's (student's) submission.
Note that we must add the option [[include=["submission_history"]]] to be able 
to extract everyone who participated in the grading, not just the last one.
This is important since the last grader might just check the parts that the 
previous grader said must be fixed by the student.
So both are part of the grading.
<<extract grades, dates and graders from all assignments>>=
for assignment in assignments:
  submission = assignment.get_submission(user,
                                         include=["submission_history"])

  <<extract grades, graders and date from [[submission]]>>
@

For each submission, we extract the grades and append them to the list of 
grades.
<<extract grades, graders and date from [[submission]]>>=
grades.append(submission.grade or "F")
@

Then we fetch the graders and append them to the list of graders.
The function [[all_graders]] expects the submission to have an attribute 
[[.assignment]] pointing to the assignment in question.
(We want this attribute to not have to use a [[canvas]] object to resolve the 
[[.assignment_id]] attribute that is there by default.)
<<extract grades, graders and date from [[submission]]>>=
submission.assignment = assignment
graders += results.all_graders(submission)
@

Finally, the date:
We should firstly use the submission date.
However, in some cases, like oral presentations, the student hasn't submitted 
anything (even if they should, in case of labs).
Then there is no submission date, so we have to resort to the grading date.
<<extract grades, graders and date from [[submission]]>>=
date = submission.submitted_at or submission.graded_at
try:
  grade_date = dt.date.fromisoformat(date.split("T")[0])
except AttributeError:
  pass
else:
  if grade_date > recent_date:
    recent_date = grade_date
@

To use this module we would run
\begin{center}
  \texttt{canvaslms results -S mysum.py}
\end{center}
in the directory where \texttt{mysum.py} is located.
We can also give the relative or absolute path to \texttt{mysum.py} instead.

%%% Modules %%%

\input{../src/canvaslms/grades/conjunctavg.tex}
\input{../src/canvaslms/grades/disjunctmax.tex}
\input{../src/canvaslms/grades/maxgradesurvey.tex}
\input{../src/canvaslms/grades/conjunctavgsurvey.tex}
