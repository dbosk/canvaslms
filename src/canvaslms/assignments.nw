This chapter provides the subcommands [[assignments]], which lists the 
assignments of a given course, and [[assignment]], which lists information 
about a given assignment.

\section{The [[assignments]] subcommand and its options}

We add the subparser for [[assignments]].
<<add arguments>>=
assignments_parser = subp.add_parser("assignments",
    help="Lists assignments of a course",
    description="Output format: <Canvas-course-ID>:<Canvas-assignm-ID> " +
      "<assignment-name>")
assignments_parser.set_defaults(func=assignments_command)
add_course_options(assignments_parser)
<<set up options for selecting type of assignments>>
@ Now, that [[assignments_command]] function must take two arguments: 
[[canvas]] and [[args]].
We use [[process_course_options]] to parse the options that we added with the 
[[add_course_options]] function above.
<<functions>>=
def assignments_command(canvas, args):
  course_list = process_course_options(canvas, args)
  <<get assignments and print them>>
@

\subsection{Selecting the type of assignments}

We also want to be able to filter out the type of assignments.
For now, we focus on all or ungraded.
<<set up options for selecting type of assignments>>=
assignments_parser.add_argument("-u", "--ungraded", action="store_true",
  help="Show only ungraded assignments.")
@ We don't need to do any particular processing for this option.


\subsection{Get and print the list of assignments}

We then simply call the list-assignments function with the [[courses_list]] 
object as a parameter.
Then we will print the most useful attributes (identifiers) of an assignment.
<<get assignments and print them>>=
if args.ungraded:
  assignments = list_ungraded_assignments(course_list)
else:
  assignments = list_assignments(course_list)
for assignment in assignments:
  print(format_assignment_id(assignment))
@


\section{The [[assignment]] subcommand and its options}

We add the subparser for [[assignment]].
We use the [[add_course_options]] and [[add_assignment_options]] to set up how 
to select (filter) the courses and assignments.
<<add arguments>>=
assignment_parser = subp.add_parser("assignment",
    help="Lists assignment details")
assignment_parser.set_defaults(func=assignment_command)
add_assignment_options(assignment_parser)
@ Now, that [[assignment_command]] function must take two arguments: [[canvas]] 
and [[args]].
We use [[process_course_options]] and [[process_assignment_options]] to parse 
the options that we added with the [[add_course_options]] and 
[[add_assignment_options]] functions above.
<<functions>>=
def assignment_command(canvas, args):
  assignment_list = process_assignment_options(canvas, args)
  for assignment in assignment_list:
    print(format_assignment(assignment))
@


\section{Selecting assignments on the command line}

We now provide two functions that sets up the options for selecting an 
assignment on the command line.
These are used above by the [[assignment_command]], but can also be used by 
other commands.

To select an assignment, we must first select a course.
<<functions>>=
def add_assignment_options(parser):
  add_course_options(parser)
  <<set up options for selecting assignments>>

def process_assignment_options(canvas, args):
  course_list = process_course_options(canvas, args)
  <<process options for selecting assignments>>
  return assignments_list
@

We add one option [[-a]] to select an assignment.
This is a regular expression which matches the assignment name and identifier.
<<set up options for selecting assignments>>=
parser.add_argument("-a", "--assignment", required=True,
  help="Regular expression matching title or Canvas identifier")
@

Now we can use the [[course_list]] and [[filter_assignments]] to filter out the 
desired assignments.
<<process options for selecting assignments>>=
assignments_list = filter_assignments(course_list, args.assignment)
@


\section{Formatting assignments}

Sometimes we want to have a brief formatting of an assignment, \eg its ID and 
title, while at other times we want to print the full assignment data.
We provide two functions for that: [[format_assignment_id]] and 
[[format_assignment]].
<<functions>>=
def format_assignment_id(assignment):
  return f"{assignment.course_id}:{assignment.id}\t{assignment.name}"

def format_assignment(assignment):
  return \
    f"Course: {assignment.course_id}\n" + \
    f"Assignment: {assignment.name} ({assignment.id})\n" + \
    f"Instruction: {assignment.description}\n" + \
    f"URL: {assignment.html_url}\n" + \
    f"Submissions: {assignment.submissions_download_url}\n"
@


\section{Producing a list of assignments}%
\label{list-assignments-function}

We provide the following functions:
\begin{itemize}
  \item [[list_assignments]], which returns all assignments;
  \item [[list_ungraded_assignments]], which returns all ungraded assignments.
\end{itemize}
We return the assignments for a list of courses, since we can match several 
courses with a regular expression (using [[filter_courses]]).
<<functions>>=
def list_assignments(courses):
  for course in courses:
    assignments = course.get_assignments()
    for assignment in assignments:
      yield assignment

def list_ungraded_assignments(courses):
  for course in courses:
    assignments = course.get_assignments(bucket="ungraded")
    for assignment in assignments:
      yield assignment
@


\section{Filtering out assignments}

We also want to filter out assignments based using regular expressions for the 
title.
<<functions>>=
def filter_assignments(courses, regex):
  p = re.compile(regex)
  for assignment in list_assignments(courses):
    if p.search(assignment.name):
      yield assignment
    elif p.search(str(assignment.id)):
      yield assignment
@

