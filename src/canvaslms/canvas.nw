\documentclass[a4paper]{report}
\usepackage{noweb}
% Needed to relax penalty for breaking code chunks across pages, otherwise 
% there might be a lot of space following a code chunk.
\def\nwendcode{\endtrivlist \endgroup}
\let\nwdocspar=\smallbreak

\usepackage[hyphens]{url}
\usepackage{hyperref}
\usepackage{authblk}

\input{preamble.tex}

\title{%
  Canvas: a command line interface
}
\author{%
  Daniel Bosk
}
\affil{%
  KTH EECS
}

\begin{document}
\maketitle

\begin{abstract}
  \input{abstract.tex}
\end{abstract}
\clearpage

\tableofcontents
\clearpage

@
\chapter{Introduction}

This is the documentation of the [[<<canvas.py>>]] (Python 3) script.
It provides a command-line interface for the Canvas LMS\@.


\section{Overview of the source code and dependencies}

The program consists of one file, [[<<canvas.py>>]].
We will use the [[canvasapi]] module, which must be installed by running
[[pip install canvasapi]].
We also use the [[argcomplete]] module, which must be installed by running
[[pip install argcomplete]].
<<canvas.py>>=
#!/bin/env python3
"""A command-line interface for the Canvas LMS."""

import argcomplete, argparse
from canvasapi import Canvas
import os
import re
import sys
import traceback

<<classes>>

<<functions>>

<<command-line interface>>
@


\section{A command-line interface}%
\label{command-line-interface}

If we run this script as a program, we want to provide a command-line 
interface.
<<command-line interface>>=
def main(argv):
  <<main body>>

if __name__ == "__main__":
  try:
    main(sys.argv)
    sys.exit(0)
  except Exception as e:
    err(-1, e)
@ We pass the command-line arguments as [[argv]] to the [[main]] function, 
instead of using [[sys.argv]] directly.
This way, we can use the main function as a library and filter some of the 
arguments.

We want uniform error handling.
We will use the function [[err]] for errors and [[warn]] for warnings, both 
inspired by err(3) and warn(3) in the BSD world.
<<functions>>=
def err(rc, msg):
  print(f"{sys.argv[0]}: error: {msg}", file=sys.stderr)
  traceback.print_exc(file=sys.stderr)
  sys.exit(rc)

def warn(msg):
  print(f"{sys.argv[0]}: {msg}", file=sys.stderr)
@

If we run this program, we must first set up a [[canvas]] object, then process 
the command-line arguments and finally run the list-users function.
<<main body>>=
<<set up canvas object>>
<<process command-line options>>
@

\subsection{Accessing Canvas}

We will use the [[canvasapi]] module.
This module must be installed by running [[pip install canvasapi]].
We keep the settings in the environment, this also requires the [[os]] module.
Now we can set up the [[canvas]] object, through which we access everything in 
Canvas.
<<set up canvas object>>=
API_URL = os.environ["CANVAS_SERVER"]
API_KEY = os.environ["CANVAS_TOKEN"]

canvas = Canvas(API_URL, API_KEY)
@

\subsection{Accessing Canvas objects}

Every Canvas object has an identifier.
However, these are not globally unique, \eg:
to access a submission of a student, we must know the course, the assignment 
and the submission identifiers.
We will provide a set of classes to handle these.
<<classes>>=
class UserID:
  def __init__(self, s):
    self.ID = s.split(":")
    if len(self.ID) < 1:
      raise Exception(f"bad user ID: {self.ID}")

  @property
  def user(self):
    return int(self.ID[0])

  def __int__(self):
    return self.user

class CourseID:
  def __init__(self, s):
    self.ID = s.split(":")
    if len(self.ID) < 1:
      raise Exception(f"bad course ID: {self.ID}")

  def __str__(self):
    return ":".join(self.ID)

  @property
  def course(self):
    return int(self.ID[0])

  def __int__(self):
    return self.course

class AssignmentID(CourseID):
  def __init__(self, s):
    super().__init__(s)
    if len(self.ID) < 2:
      raise Exception(f"bad assignment ID: {self.ID}")

  @property
  def assignment(self):
    return int(self.ID[1])

  def __int__(self):
    return self.assignment
@

\subsection{Process command-line options}

We'll use [[argparse]] to parse the command-line options.
Remember that we process [[argv]] passed to the function, not [[sys.argv]] 
directly.
<<process command-line options>>=
argp = argparse.ArgumentParser(description="Scriptable Canvas LMS.",
                               epilog="Web: https://github.com/dbosk/canvas")
subp = argp.add_subparsers(required=True)
<<add arguments>>
argcomplete.autocomplete(argp)
@

We must remove the first element of [[argv]] (the command itself).
However, if this is the only option, we must ensure that the list contains an 
empty string.
Otherwise, [[argp.parse_args]] will fail.
<<process command-line options>>=
argv = argv[1:]
if not argv:
  argv = [""]
args = argp.parse_args(argv)
@

For each subcommand, we will add a subparser ([[subp.add_parser]]) that will 
set the [[func]] attribute.
Then we can execute the correct function and let that function check the 
remaining arguments.
<<process command-line options>>=
if args.func:
  args.func(canvas, args)
@



\chapter{The [[courses]] command}

\input{courses.tex}



\chapter{The [[course]] command}

\input{course.tex}



\chapter{The [[users]] command}

\input{users.tex}



\chapter{The assignments commands}

\input{assignments.tex}



\chapter{The submissions commands}

\input{submissions.tex}



\chapter{The grade commands}

\input{grades.tex}



\printbibliography{}

\end{document}
