This chapter provides everything related to courses.
Firstly, it provides the [[courses]] subcommand.
Secondly, it provides some useful functions for working with courses that will 
be used by the other subcommands.


\section{The subcommand and its options}

We provide a subcommand, [[courses]].
When invoked, we will call the function [[courses_command]] (defined below).
<<add arguments>>=
courses_parser = subp.add_parser("courses", help="Lists your courses",
  description="Output format: <Canvas-course-ID> <course-code> <course-name>")
courses_parser.set_defaults(func=courses_command)
@ At the moment it doesn't have any options.



\section{Producing a list of courses, [[courses_command]]}%
\label{list-courses-function}

We provide the function~[[courses_command]] which will be called by the main 
argument parser.
<<functions>>=
def courses_command(canvas, args):
  courses = canvas.get_courses()
  <<print the list of courses>>
@

Now we can format the list of courses and print them.
We want to provide a POSIX-tools friendly print-out, so we'll use tab-separated 
values.
The useful values are
the Canvas ID ([[course.id]]),
the course code (unique and human comprehensible),
the course name (for humans).
<<print the list of courses>>=
for course in courses:
  print(f"{course.id}\t{course.course_code}\t{course.name}")
@



\section{Find course based on course code}%
\label{search-course-code}
\label{filter-courses}

We provide the function~[[filter_courses]] that will filter the list of courses 
based on a regular expression~[[regex]].
<<functions>>=
def filter_courses(canvas, regex):
  courses = canvas.get_courses()
  p = re.compile(regex)
  for course in courses:
    <<yield course matching regex>>
@

We will match a course if the [[regex]] (compiled into [[p]]) will match any of 
the attributes [[course_code]] or [[name]] of a course.
<<yield course matching regex>>=
if p.search(course.name):
  yield course
elif p.search(course.course_code):
  yield course
elif p.search(str(course.id)):
  yield course
@


\section{Selecting a course on the command line}

We provide two ways to identify a course: by Canvas' ID number, which is 
unique, or by matching the course name and course code against a regular 
expression.

We provide a function that can be used by other subcommands to set up options 
for selecting a course.
<<functions>>=
def add_course_options(parser):
  <<set up options for selecting courses>>

def process_course_options(canvas, args):
  <<process options for selecting courses>>
  return course_list
@

We need a course, so we require a regular expression that matches the course 
title, course code or Canvas identifier.
<<set up options for selecting courses>>=
parser.add_argument("-c", "--course", required=True,
  help="Filter courses by regular expression (title, course code, Canvas ID)")
@

When we check for either of these arguments, we set up a list of courses, 
[[course_list]], that will be returned.
<<process options for selecting courses>>=
course_list = filter_courses(canvas, args.course)
@ We use the [[filter_courses]] from \cref{filter-courses}.

